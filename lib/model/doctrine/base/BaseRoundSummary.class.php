<?php

/**
 * BaseRoundSummary
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $match_id
 * @property integer $map_id
 * @property boolean $bomb_planted
 * @property boolean $bomb_defused
 * @property boolean $bomb_exploded
 * @property enum $win_type
 * @property enum $team_win
 * @property boolean $ct_win
 * @property boolean $t_win
 * @property integer $score_a
 * @property integer $score_b
 * @property integer $best_killer
 * @property integer $best_killer_nb
 * @property boolean $best_killer_fk
 * @property text $best_action_type
 * @property text $best_action_param
 * @property varchar $backup_file_name
 * @property integer $round_id
 * @property Matchs $Match
 * @property Maps $Map
 * @property Players $BestKiller
 * 
 * @method integer      getId()                Returns the current record's "id" value
 * @method integer      getMatchId()           Returns the current record's "match_id" value
 * @method integer      getMapId()             Returns the current record's "map_id" value
 * @method boolean      getBombPlanted()       Returns the current record's "bomb_planted" value
 * @method boolean      getBombDefused()       Returns the current record's "bomb_defused" value
 * @method boolean      getBombExploded()      Returns the current record's "bomb_exploded" value
 * @method enum         getWinType()           Returns the current record's "win_type" value
 * @method enum         getTeamWin()           Returns the current record's "team_win" value
 * @method boolean      getCtWin()             Returns the current record's "ct_win" value
 * @method boolean      getTWin()              Returns the current record's "t_win" value
 * @method integer      getScoreA()            Returns the current record's "score_a" value
 * @method integer      getScoreB()            Returns the current record's "score_b" value
 * @method integer      getBestKiller()        Returns the current record's "best_killer" value
 * @method integer      getBestKillerNb()      Returns the current record's "best_killer_nb" value
 * @method boolean      getBestKillerFk()      Returns the current record's "best_killer_fk" value
 * @method text         getBestActionType()    Returns the current record's "best_action_type" value
 * @method text         getBestActionParam()   Returns the current record's "best_action_param" value
 * @method varchar      getBackupFileName()    Returns the current record's "backup_file_name" value
 * @method integer      getRoundId()           Returns the current record's "round_id" value
 * @method Matchs       getMatch()             Returns the current record's "Match" value
 * @method Maps         getMap()               Returns the current record's "Map" value
 * @method Players      getBestKiller()        Returns the current record's "BestKiller" value
 * @method RoundSummary setId()                Sets the current record's "id" value
 * @method RoundSummary setMatchId()           Sets the current record's "match_id" value
 * @method RoundSummary setMapId()             Sets the current record's "map_id" value
 * @method RoundSummary setBombPlanted()       Sets the current record's "bomb_planted" value
 * @method RoundSummary setBombDefused()       Sets the current record's "bomb_defused" value
 * @method RoundSummary setBombExploded()      Sets the current record's "bomb_exploded" value
 * @method RoundSummary setWinType()           Sets the current record's "win_type" value
 * @method RoundSummary setTeamWin()           Sets the current record's "team_win" value
 * @method RoundSummary setCtWin()             Sets the current record's "ct_win" value
 * @method RoundSummary setTWin()              Sets the current record's "t_win" value
 * @method RoundSummary setScoreA()            Sets the current record's "score_a" value
 * @method RoundSummary setScoreB()            Sets the current record's "score_b" value
 * @method RoundSummary setBestKiller()        Sets the current record's "best_killer" value
 * @method RoundSummary setBestKillerNb()      Sets the current record's "best_killer_nb" value
 * @method RoundSummary setBestKillerFk()      Sets the current record's "best_killer_fk" value
 * @method RoundSummary setBestActionType()    Sets the current record's "best_action_type" value
 * @method RoundSummary setBestActionParam()   Sets the current record's "best_action_param" value
 * @method RoundSummary setBackupFileName()    Sets the current record's "backup_file_name" value
 * @method RoundSummary setRoundId()           Sets the current record's "round_id" value
 * @method RoundSummary setMatch()             Sets the current record's "Match" value
 * @method RoundSummary setMap()               Sets the current record's "Map" value
 * @method RoundSummary setBestKiller()        Sets the current record's "BestKiller" value
 * 
 * @package    PhpProject1
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseRoundSummary extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('round_summary');
        $this->hasColumn('id', 'integer', 20, array(
             'primary' => true,
             'type' => 'integer',
             'autoincrement' => true,
             'length' => 20,
             ));
        $this->hasColumn('match_id', 'integer', 20, array(
             'type' => 'integer',
             'notnull' => true,
             'length' => 20,
             ));
        $this->hasColumn('map_id', 'integer', 20, array(
             'type' => 'integer',
             'notnull' => true,
             'length' => 20,
             ));
        $this->hasColumn('bomb_planted', 'boolean', null, array(
             'type' => 'boolean',
             ));
        $this->hasColumn('bomb_defused', 'boolean', null, array(
             'type' => 'boolean',
             ));
        $this->hasColumn('bomb_exploded', 'boolean', null, array(
             'type' => 'boolean',
             ));
        $this->hasColumn('win_type', 'enum', null, array(
             'type' => 'enum',
             'values' => 
             array(
              0 => 'bombdefused',
              1 => 'bombeexploded',
              2 => 'normal',
              3 => 'saved',
             ),
             'default' => 'normal',
             ));
        $this->hasColumn('team_win', 'enum', null, array(
             'type' => 'enum',
             'values' => 
             array(
              0 => 'a',
              1 => 'b',
             ),
             ));
        $this->hasColumn('ct_win', 'boolean', null, array(
             'type' => 'boolean',
             ));
        $this->hasColumn('t_win', 'boolean', null, array(
             'type' => 'boolean',
             ));
        $this->hasColumn('score_a', 'integer', 2, array(
             'type' => 'integer',
             'length' => 2,
             ));
        $this->hasColumn('score_b', 'integer', 2, array(
             'type' => 'integer',
             'length' => 2,
             ));
        $this->hasColumn('best_killer', 'integer', 20, array(
             'type' => 'integer',
             'length' => 20,
             ));
        $this->hasColumn('best_killer_nb', 'integer', 5, array(
             'type' => 'integer',
             'length' => 5,
             ));
        $this->hasColumn('best_killer_fk', 'boolean', null, array(
             'type' => 'boolean',
             ));
        $this->hasColumn('best_action_type', 'text', null, array(
             'type' => 'text',
             ));
        $this->hasColumn('best_action_param', 'text', null, array(
             'type' => 'text',
             ));
        $this->hasColumn('backup_file_name', 'varchar', 255, array(
             'type' => 'varchar',
             'length' => 255,
             ));
        $this->hasColumn('round_id', 'integer', 5, array(
             'type' => 'integer',
             'length' => 5,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Matchs as Match', array(
             'local' => 'match_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('Maps as Map', array(
             'local' => 'map_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('Players as BestKiller', array(
             'local' => 'best_killer',
             'foreign' => 'id',
             'onDelete' => 'SET NULL'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}